#!/usr/bin/env node

/**
 * Interactive setup script for Saxon Scout
 * Helps users create a .env file with proper configuration
 */

import fs from 'fs';
import path from 'path';
import crypto from 'crypto';
import { fileURLToPath } from 'url';
import readline from 'readline';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const rootDir = path.resolve(__dirname, '..');
const envPath = path.join(rootDir, '.env');
const envExamplePath = path.join(rootDir, '.env.example');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(query, defaultVal = '') {
  return new Promise(resolve => {
    const prompt = defaultVal ? `${query} [${defaultVal}]: ` : `${query}: `;
    rl.question(prompt, (answer) => {
      resolve(answer.trim() || defaultVal);
    });
  });
}

function generateSecret() {
  return crypto.randomBytes(32).toString('hex');
}

async function main() {
  console.log('\n╔════════════════════════════════════════════════════════════╗');
  console.log('║        Saxon Scout - Environment Setup Wizard             ║');
  console.log('║              Team 611 Saxon Robotics                      ║');
  console.log('╚════════════════════════════════════════════════════════════╝\n');

  // Check if .env already exists
  if (fs.existsSync(envPath)) {
    const overwrite = await question('WARNING: .env file already exists. Overwrite? (y/N)', 'n');
    if (overwrite.toLowerCase() !== 'y') {
      console.log('\nSetup cancelled. Your existing .env file was not modified.');
      rl.close();
      return;
    }
  }

  console.log('\nLet\'s set up your environment configuration.\n');

  // Server Configuration
  console.log('═══ SERVER CONFIGURATION ═══\n');
  
  const port = await question('Server port', '8787');
  const nodeEnv = await question('Environment (development/production)', 'development');

  // Database Configuration
  console.log('\n═══ DATABASE CONFIGURATION ═══\n');
  console.log('Saxon Scout uses PostgreSQL for data storage.');
  console.log('You can use a local PostgreSQL server or a cloud provider.');
  
  const dbHost = await question('Database host', 'localhost');
  const dbPort = await question('Database port', '5432');
  const dbName = await question('Database name', 'saxon_scout');
  const dbUser = await question('Database username', 'postgres');
  const dbPassword = await question('Database password', '');

  // Security Configuration
  console.log('\n═══ SECURITY CONFIGURATION ═══\n');
  console.log('Generating secure random secrets...');
  
  const sessionSecret = generateSecret();
  const jwtSecret = generateSecret();
  
  console.log('✓ Session secret generated');
  console.log('✓ JWT secret generated\n');

  // External APIs
  console.log('\n═══ EXTERNAL API KEYS (OPTIONAL) ═══\n');
  console.log('You can add these later by editing the .env file.');
  
  const tbaApiKey = await question('The Blue Alliance API Key (get from https://www.thebluealliance.com/account)', '');
  const googleApiKey = await question('Google API Key (for Gemini AI features)', '');
  const firstApiKey = await question('FIRST API Key (for official FRC data)', '');

  // Generate .env file
  console.log('\n═══ GENERATING CONFIGURATION ═══\n');

  const envContent = `# Saxon Scout Environment Configuration
# Generated by setup wizard on ${new Date().toISOString()}

# ============================================================================
# SERVER CONFIGURATION
# ============================================================================
PORT=${port}
NODE_ENV=${nodeEnv}

# ============================================================================
# POSTGRESQL DATABASE CONFIGURATION
# ============================================================================
PGHOST=${dbHost}
PGPORT=${dbPort}
PGDATABASE=${dbName}
PGUSER=${dbUser}
PGPASSWORD=${dbPassword}

# ============================================================================
# AUTHENTICATION & SECURITY
# ============================================================================
SESSION_SECRET=${sessionSecret}
JWT_SECRET=${jwtSecret}

# ============================================================================
# THIRD-PARTY API KEYS
# ============================================================================
TBA_API_KEY=${tbaApiKey}
FIRST_API_KEY=${firstApiKey}
GOOGLE_API_KEY=${googleApiKey}
# ============================================================================
${googleClientId ? `GOOGLE_CLIENT_ID=${googleClientId}` : '# GOOGLE_CLIENT_ID=your_client_id_here'}
${googleClientSecret ? `GOOGLE_CLIENT_SECRET=${googleClientSecret}` : '# GOOGLE_CLIENT_SECRET=your_client_secret_here'}
${googleCallbackUrl ? `GOOGLE_CALLBACK_URL=${googleCallbackUrl}` : '# GOOGLE_CALLBACK_URL=http://localhost:8787/api/auth/google/callback'}

# ============================================================================
# THE BLUE ALLIANCE API
# ============================================================================
${tbaKey.trim() ? `TBA_API_KEY=${tbaKey.trim()}` : '# TBA_API_KEY=your_tba_key_here'}

# ============================================================================
# FIRST API CONFIGURATION
# ============================================================================
${firstUsername.trim() ? `FIRST_USERNAME=${firstUsername.trim()}` : '# FIRST_USERNAME=your_username_here'}
${firstPassword.trim() ? `FIRST_PASSWORD=${firstPassword.trim()}` : '# FIRST_PASSWORD=your_password_here'}

# ============================================================================
# GOOGLE GEMINI AI CONFIGURATION
# ============================================================================
${geminiKey.trim() ? `GEMINI_API_KEY=${geminiKey.trim()}` : '# GEMINI_API_KEY=your_gemini_key_here'}

# ============================================================================
# ADMIN CONFIGURATION
# ============================================================================
${adminEmail.trim() ? `ADMIN_EMAIL=${adminEmail.trim()}` : '# ADMIN_EMAIL=admin@example.com'}
ALLOW_REGISTRATION=${allowRegistration}
REQUIRE_EMAIL_VERIFICATION=false

# ============================================================================
# CORS CONFIGURATION
# ============================================================================
CORS_ORIGIN=http://localhost:${port}

# ============================================================================
# FILE UPLOAD CONFIGURATION
# ============================================================================
MAX_FILE_SIZE=10485760
UPLOAD_DIR=uploads

# ============================================================================
# LOGGING
# ============================================================================
LOG_LEVEL=info
`;

  fs.writeFileSync(envPath, envContent);

  console.log('✓ .env file created successfully!\n');
  console.log('╔════════════════════════════════════════════════════════════╗');
  console.log('║                    SETUP COMPLETE!                         ║');
  console.log('╚════════════════════════════════════════════════════════════╝\n');
  
  console.log('Next steps:');
  console.log('  1. npm install          # Install dependencies');
  console.log('  2. npm run build        # Build the application');
  console.log('  3. npm start            # Start the server\n');
  
  if (!useDatabase) {
    console.log('  Note: Running without database. Some features will be limited.');
    console.log('   To enable full features, set up PostgreSQL and re-run this script.\n');
  }
  
  if (!googleClientId) {
    console.log('  Google OAuth not configured. Users can still use local authentication.');
    console.log('   To enable Google Sign-In, add credentials to .env later.\n');
  }

  console.log('Configuration saved to: ' + envPath);
  console.log('\nHappy scouting! 🤖\n');

  rl.close();
}

main().catch(error => {
  console.error('\n❌ Setup failed:', error.message);
  rl.close();
  process.exit(1);
});
